// Напишите функцию, которая может возвращать наименьшее значение массива или индекс этого значения. Второй параметр функции скажет, должна ли она возвращать значение или индекс.

function min(arr, toReturn) {

  if (arr.length === 0) {
    return null; 
}
    minValue = arr[0];
    minIndex = 0;

    for(let i = 0; i <arr.length; i++){
      if(arr[i] < minValue){
        minValue = arr[i];
        minIndex = arr[i]
      }
    }
    if(toReturn === 'value'){
      return minValue
    } else if (toReturn === 'index'){
      return minIndex;
    } else {
      return null
    }
  }

const myArray = [1,2,3,4,5];
console.log(min(myArray, 'value')); 
console.log(min(myArray, 'index')); 
// =====================================


function stringy(size) {

  let str = '';

     for(let i = 0; i < size; i++){
      str += i % 2 === 0 ? '1' : '0'
     }

     return str
}

console.log(stringy(5))
// ==================================
function ifChuckSaysSo(){
  return !true;
}

console.log(ifChuckSaysSo());
// ====================
function nextInLine(arr, item) {
  arr.push(item);
  item = arr.shift();
  
  return item;
  
}

// Setup
let testArr = [1, 2, 3, 4, 5];

// Display code
console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6));
console.log("After: " + JSON.stringify(testArr));
// =======================
function trueOrFalse(wasThatTrue) {
  if(wasThatTrue){
    return trueOrFalse;
  }
  return false;
}
// ==============
function quadratic(x1, x2) {
  // Коэффициент a всегда равен 1
  let a = 1;
  // Коэффициент b равен сумме корней с обратным знаком
  let b = -(x1 + x2);

  // Коэффициент c равен произведению корней
  let c = x1 * x2;

  return [a, b, c];
}

// Примеры использования
console.log(quadratic(1, 2)); // Возвращает [1, -3, 2]
console.log(quadratic(0, 1)); // Возвращает [1, -1, 0]
// ======================
// В игру играют два игрока – «черный» и «белый». Игра состоит из нескольких раундов. Если игрок выигрывает в раунде, он должен снова сделать ход в следующем раунде.Если игрок проигрывает раунд, в следующий раунд переходит другой игрок. Учитывая, чья очередь была в предыдущем раунде и выиграл ли он, определите, чья очередь в следующем раунде.

function whoseMove(lastPlayer, win) {
  // Если игрок победил предыдущий раунд, то он продолжает ходить
  // В противном случае ход переходит другому игроку
  return win ? lastPlayer : lastPlayer === "black" ? "white" : "black";
}
// =============================

// Дон Драмфет живет в хорошем районе, но один из его соседей начал сдавать его дом. Дон Драмфет хочет построить стену между своим домом и домом соседа и пытается заставить районную ассоциацию заплатить за это.Он начинает просить своих соседей подать петицию с просьбой заставить ассоциацию построить стену. К несчастью для Дона Драмфета, он не очень хорошо читаетбу него очень ограниченный объем внимания, и он может запомнить только две буквы из имен каждого из своих соседей. Собирая подписи, он настаивает на том, чтобы соседи сокращали свои имена до тех пор, пока не останутся две буквы, и он, наконец, сможет их прочитать.
// Ваш код покажет полное имя соседа и сокращенную версию имени в виде массива. Если количество символов в имени меньше или равно двум, он вернет массив, содержащий только имя как есть"
function whoIsPaying(name) {
  // Если длина имени меньше или равна 2, вернуть массив с одним элементом - исходным именем
  if (name.length <= 2) {
    return [name];
  }
  
  // Иначе вернуть массив с полным именем и его усеченной версией
  return [name, name.slice(0, 2)];
}
// ==================
// Создайте функцию, которая находит интеграл переданного выражения.
// Чтобы найти интеграл, все, что вам нужно сделать, это прибавить единицу к показателю степени (второй аргумент) и разделить коэффициент (первый аргумент) на это новое число.

function integrate(coefficient, exponent) {
  const newExponent = exponent + 1;
  const newCoefficient = coefficient / newExponent;

  // Возвращаем строку в виде интеграла
  return `${newCoefficient}x^${newExponent}`;
}
